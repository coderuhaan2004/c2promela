1. Inference Time: 4 min 41s

Generated Output:


Convert the following C code to Promela, preserving its functionality and logic. 
Use appropriate Promela constructs, such as `proctype`, `do`, `if`, `goto`, `chan`, or `atomic` where applicable. 
Ensure variable declarations, loops, and conditionals are properly translated.

C Code:

#include <stdio.h>

int main() {
    int year;

    // Input year from the user
    printf("Enter a year: ");
    scanf("%d", &year);

    // Check if the year is leap year
    if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
        printf("%d is a leap year.
", year);
    } else {
        printf("%d is not a leap year.
", year);
    }

    return 0;
}


Promela Equivalent:

#define LEAP_YEAR(Y) \
    ((Y % 4 == 0 && Y % 100 != 0) || (Y % 400 == 0))

proctype main() {
    int year;

    printf("Enter a year: ");
    scanf("%d", &year);

    if (LEAP_YEAR(year)) {
        printf("%d is a leap year.
", year);
    } else {
        printf("%d is not a leap year.
", year);
    }

    return 0;
}

====================================================================================
c_code:

#include <stdio.h>

int factorial(int n) {
    if (n == 0)
        return 1;
    else
        return n * factorial(n - 1);
}

int main() {
    int num = 5;
    int result = factorial(num);
    printf("Factorial of %d is %d\\n", num, result);
    return 0;
}

--------------------------------------------
generated promela_code:

```promela
byte num = 5; // Define the number for which to calculate the factorial
byte result;  // Variable to store the factorial result

inline factorial(n) { // Inline function to calculate factorial
  if
  :: (n == 0) ->
    result = 1;
  :: else ->
    // Recursive call (simulated iteratively because Promela doesn't support recursion directly)
    byte temp_n = n;
    byte temp_result = 1;
    do
    :: (temp_n == 0) -> break;
    :: else ->
      temp_result = temp_result * temp_n;
      temp_n = temp_n - 1;
    od;
    result = temp_result;
  fi;
}

init {
  factorial(num); // Call the factorial function
  printf("Factorial of %d is %d\n", num, result); // Print the result
}
```